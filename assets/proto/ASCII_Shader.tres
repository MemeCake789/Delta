[gd_resource type="VisualShader" load_steps=83 format=2]

[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/1.png" type="Texture" id=1]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/8.png" type="Texture" id=2]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/6.png" type="Texture" id=3]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/7.png" type="Texture" id=4]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/2.png" type="Texture" id=5]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/3.png" type="Texture" id=6]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/5.png" type="Texture" id=7]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/9.png" type="Texture" id=8]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/10.png" type="Texture" id=9]
[ext_resource path="res://Assets/Shaders/ASCII Shader/ASCII/4.png" type="Texture" id=10]

[sub_resource type="VisualShaderNodeScalarOp" id=73]
default_input_values = [ 0, 0.0, 1, 0.001 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=74]
default_input_values = [ 0, 0.0, 1, 0.001 ]
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=76]

[sub_resource type="VisualShaderNodeTexture" id=1]
source = 1

[sub_resource type="VisualShaderNodeColorConstant" id=2]
constant = Color( 0, 0, 0, 1 )

[sub_resource type="VisualShaderNodeVectorOp" id=3]

[sub_resource type="VisualShaderNodeVectorOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeInput" id=5]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=6]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 17, 9, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=7]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorFunc" id=8]
output_port_for_preview = 0
function = 19

[sub_resource type="VisualShaderNodeVectorOp" id=9]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=11]
output_port_for_preview = 0
operator = 3

[sub_resource type="VisualShaderNodeVectorCompose" id=12]

[sub_resource type="VisualShaderNodeInput" id=14]
output_port_for_preview = 0
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeScalarConstant" id=15]
constant = 8.0

[sub_resource type="VisualShaderNodeScalarOp" id=16]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=17]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=18]
texture = ExtResource( 4 )

[sub_resource type="VisualShaderNodeTexture" id=19]
texture = ExtResource( 3 )

[sub_resource type="VisualShaderNodeTexture" id=20]
texture = ExtResource( 2 )

[sub_resource type="VisualShaderNodeTexture" id=21]
texture = ExtResource( 8 )

[sub_resource type="VisualShaderNodeTexture" id=22]
texture = ExtResource( 9 )

[sub_resource type="VisualShaderNodeIf" id=23]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.9, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeIf" id=24]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.8, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeIf" id=25]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.7, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeIf" id=26]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.6, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeIf" id=27]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.5, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=28]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=29]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=30]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=31]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=32]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=33]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=34]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=35]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=36]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=37]

[sub_resource type="VisualShaderNodeScalarOp" id=38]

[sub_resource type="VisualShaderNodeScalarOp" id=39]

[sub_resource type="VisualShaderNodeScalarOp" id=40]

[sub_resource type="VisualShaderNodeIf" id=41]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.4, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeIf" id=42]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.3, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeIf" id=43]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.2, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeIf" id=44]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.1, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=45]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=46]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=47]
operator = 1

[sub_resource type="VisualShaderNodeScalarOp" id=48]
operator = 1

[sub_resource type="VisualShaderNodeIf" id=49]
output_port_for_preview = 0
default_input_values = [ 0, 1.0, 1, 0.0, 2, 1e-05, 3, Vector3( 0, 0, 0 ), 4, Vector3( 1, 1, 1 ), 5, Vector3( 0, 0, 0 ) ]

[sub_resource type="VisualShaderNodeScalarOp" id=50]
operator = 1

[sub_resource type="VisualShaderNodeTexture" id=51]
texture = ExtResource( 5 )

[sub_resource type="VisualShaderNodeTexture" id=52]
texture = ExtResource( 1 )

[sub_resource type="VisualShaderNodeTexture" id=53]
texture = ExtResource( 6 )

[sub_resource type="VisualShaderNodeTexture" id=54]
texture = ExtResource( 10 )

[sub_resource type="VisualShaderNodeTexture" id=55]
texture = ExtResource( 7 )

[sub_resource type="VisualShaderNodeScalarOp" id=56]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=57]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=58]
operator = 2

[sub_resource type="VisualShaderNodeColorFunc" id=59]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=60]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=61]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=62]

[sub_resource type="VisualShaderNodeScalarOp" id=63]

[sub_resource type="VisualShaderNodeScalarOp" id=64]

[sub_resource type="VisualShaderNodeScalarOp" id=65]

[sub_resource type="VisualShaderNodeScalarOp" id=66]

[sub_resource type="VisualShaderNodeScalarOp" id=67]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=68]

[sub_resource type="VisualShaderNodeInput" id=69]
output_port_for_preview = 0
input_name = "screen_pixel_size"

[sub_resource type="VisualShaderNodeVectorOp" id=70]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 10, 10, 10 ), 1, Vector3( 0, 0, 0 ) ]
operator = 3

[sub_resource type="VisualShaderNodeVectorDecompose" id=72]

[resource]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_37;
uniform sampler2D tex_frg_36;
uniform sampler2D tex_frg_35;
uniform sampler2D tex_frg_33;
uniform sampler2D tex_frg_34;
uniform sampler2D tex_frg_76;
uniform sampler2D tex_frg_75;
uniform sampler2D tex_frg_74;
uniform sampler2D tex_frg_72;
uniform sampler2D tex_frg_73;



void vertex() {
// Output:0

}

void fragment() {
// Input:20
	vec3 n_out20p0 = vec3(UV, 0.0);

// Input:96
	vec3 n_out96p0 = vec3(SCREEN_PIXEL_SIZE, 1.0);

// VectorOp:97
	vec3 n_in97p0 = vec3(10.00000, 10.00000, 10.00000);
	vec3 n_out97p0 = n_in97p0 / n_out96p0;

// VectorDecompose:99
	float n_out99p0 = n_out97p0.x;
	float n_out99p1 = n_out97p0.y;
	float n_out99p2 = n_out97p0.z;

// ScalarOp:100
	float n_in100p1 = 0.00100;
	float n_out100p0 = n_out99p0 * n_in100p1;

// ScalarOp:101
	float n_in101p1 = 0.00100;
	float n_out101p0 = n_out99p1 * n_in101p1;

// VectorCompose:103
	float n_in103p2 = 0.00000;
	vec3 n_out103p0 = vec3(n_out100p0, n_out101p0, n_in103p2);

// VectorOp:21
	vec3 n_out21p0 = n_out20p0 * n_out103p0;

// Scalar:30
	float n_out30p0 = 8.000000;

// VectorOp:22
	vec3 n_out22p0 = n_out21p0 * vec3(n_out30p0);

// Texture:37
	vec4 tex_frg_37_read = texture(tex_frg_37, n_out22p0.xy);
	vec3 n_out37p0 = tex_frg_37_read.rgb;
	float n_out37p1 = tex_frg_37_read.a;

// Input:3
	vec3 n_out3p0 = vec3(SCREEN_UV, 0.0);

// ScalarOp:31
	float n_out31p0 = n_out100p0 * n_out30p0;

// ScalarOp:32
	float n_out32p0 = n_out101p0 * n_out30p0;

// VectorCompose:28
	float n_in28p2 = 0.00000;
	vec3 n_out28p0 = vec3(n_out31p0, n_out32p0, n_in28p2);

// VectorOp:25
	vec3 n_out25p0 = n_out3p0 * n_out28p0;

// VectorFunc:24
	vec3 n_out24p0 = floor(n_out25p0);

// VectorOp:27
	vec3 n_out27p0 = n_out24p0 / n_out28p0;

// Texture:14
	vec3 n_out14p0;
	float n_out14p1;
	{
		vec4 _tex_read = textureLod(SCREEN_TEXTURE, n_out27p0.xy, 0.0);
		n_out14p0 = _tex_read.rgb;
		n_out14p1 = _tex_read.a;
	}

// ColorFunc:8
	vec3 n_out8p0;
	{
		vec3 c = n_out14p0;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		float max3 = max(max1, max2);
		n_out8p0 = vec3(max3, max3, max3);
	}

// ScalarOp:93
	float n_in93p1 = 1.00000;
	float n_out93p0 = dot(n_out8p0, vec3(0.333333, 0.333333, 0.333333)) * n_in93p1;

// ScalarOp:95
	float n_in95p1 = 0.00000;
	float n_out95p0 = n_out93p0 + n_in95p1;

// If:38
	float n_in38p1 = 0.90000;
	float n_in38p2 = 0.00001;
	vec3 n_in38p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in38p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in38p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out38p0;
	if(abs(n_out95p0 - n_in38p1) < n_in38p2)
	{
		n_out38p0 = n_in38p3;
	}
	else if(n_out95p0 < n_in38p1)
	{
		n_out38p0 = n_in38p5;
	}
	else
	{
		n_out38p0 = n_in38p4;
	}

// ScalarOp:51
	float n_out51p0 = n_out37p1 * dot(n_out38p0, vec3(0.333333, 0.333333, 0.333333));

// Texture:36
	vec4 tex_frg_36_read = texture(tex_frg_36, n_out22p0.xy);
	vec3 n_out36p0 = tex_frg_36_read.rgb;
	float n_out36p1 = tex_frg_36_read.a;

// If:41
	float n_in41p1 = 0.80000;
	float n_in41p2 = 0.00001;
	vec3 n_in41p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in41p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in41p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out41p0;
	if(abs(n_out95p0 - n_in41p1) < n_in41p2)
	{
		n_out41p0 = n_in41p3;
	}
	else if(n_out95p0 < n_in41p1)
	{
		n_out41p0 = n_in41p5;
	}
	else
	{
		n_out41p0 = n_in41p4;
	}

// ScalarOp:50
	float n_out50p0 = dot(n_out41p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out38p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:52
	float n_out52p0 = n_out36p1 * n_out50p0;

// Texture:35
	vec4 tex_frg_35_read = texture(tex_frg_35, n_out22p0.xy);
	vec3 n_out35p0 = tex_frg_35_read.rgb;
	float n_out35p1 = tex_frg_35_read.a;

// If:44
	float n_in44p1 = 0.70000;
	float n_in44p2 = 0.00001;
	vec3 n_in44p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in44p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in44p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out44p0;
	if(abs(n_out95p0 - n_in44p1) < n_in44p2)
	{
		n_out44p0 = n_in44p3;
	}
	else if(n_out95p0 < n_in44p1)
	{
		n_out44p0 = n_in44p5;
	}
	else
	{
		n_out44p0 = n_in44p4;
	}

// ScalarOp:49
	float n_out49p0 = dot(n_out44p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out41p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:53
	float n_out53p0 = n_out35p1 * n_out49p0;

// Texture:33
	vec4 tex_frg_33_read = texture(tex_frg_33, n_out22p0.xy);
	vec3 n_out33p0 = tex_frg_33_read.rgb;
	float n_out33p1 = tex_frg_33_read.a;

// If:45
	float n_in45p1 = 0.60000;
	float n_in45p2 = 0.00001;
	vec3 n_in45p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in45p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in45p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out45p0;
	if(abs(n_out95p0 - n_in45p1) < n_in45p2)
	{
		n_out45p0 = n_in45p3;
	}
	else if(n_out95p0 < n_in45p1)
	{
		n_out45p0 = n_in45p5;
	}
	else
	{
		n_out45p0 = n_in45p4;
	}

// ScalarOp:48
	float n_out48p0 = dot(n_out45p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out44p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:54
	float n_out54p0 = n_out33p1 * n_out48p0;

// Texture:34
	vec4 tex_frg_34_read = texture(tex_frg_34, n_out22p0.xy);
	vec3 n_out34p0 = tex_frg_34_read.rgb;
	float n_out34p1 = tex_frg_34_read.a;

// If:46
	float n_in46p1 = 0.50000;
	float n_in46p2 = 0.00001;
	vec3 n_in46p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in46p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in46p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out46p0;
	if(abs(n_out95p0 - n_in46p1) < n_in46p2)
	{
		n_out46p0 = n_in46p3;
	}
	else if(n_out95p0 < n_in46p1)
	{
		n_out46p0 = n_in46p5;
	}
	else
	{
		n_out46p0 = n_in46p4;
	}

// ScalarOp:47
	float n_out47p0 = dot(n_out46p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out45p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:55
	float n_out55p0 = n_out34p1 * n_out47p0;

// Texture:76
	vec4 tex_frg_76_read = texture(tex_frg_76, n_out22p0.xy);
	vec3 n_out76p0 = tex_frg_76_read.rgb;
	float n_out76p1 = tex_frg_76_read.a;

// If:60
	float n_in60p1 = 0.40000;
	float n_in60p2 = 0.00001;
	vec3 n_in60p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in60p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in60p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out60p0;
	if(abs(n_out95p0 - n_in60p1) < n_in60p2)
	{
		n_out60p0 = n_in60p3;
	}
	else if(n_out95p0 < n_in60p1)
	{
		n_out60p0 = n_in60p5;
	}
	else
	{
		n_out60p0 = n_in60p4;
	}

// ScalarOp:69
	float n_out69p0 = dot(n_out60p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out46p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:77
	float n_out77p0 = n_out76p1 * n_out69p0;

// Texture:75
	vec4 tex_frg_75_read = texture(tex_frg_75, n_out22p0.xy);
	vec3 n_out75p0 = tex_frg_75_read.rgb;
	float n_out75p1 = tex_frg_75_read.a;

// If:61
	float n_in61p1 = 0.30000;
	float n_in61p2 = 0.00001;
	vec3 n_in61p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in61p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in61p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out61p0;
	if(abs(n_out95p0 - n_in61p1) < n_in61p2)
	{
		n_out61p0 = n_in61p3;
	}
	else if(n_out95p0 < n_in61p1)
	{
		n_out61p0 = n_in61p5;
	}
	else
	{
		n_out61p0 = n_in61p4;
	}

// ScalarOp:68
	float n_out68p0 = dot(n_out61p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out60p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:78
	float n_out78p0 = n_out75p1 * n_out68p0;

// Texture:74
	vec4 tex_frg_74_read = texture(tex_frg_74, n_out22p0.xy);
	vec3 n_out74p0 = tex_frg_74_read.rgb;
	float n_out74p1 = tex_frg_74_read.a;

// If:62
	float n_in62p1 = 0.20000;
	float n_in62p2 = 0.00001;
	vec3 n_in62p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in62p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in62p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out62p0;
	if(abs(n_out95p0 - n_in62p1) < n_in62p2)
	{
		n_out62p0 = n_in62p3;
	}
	else if(n_out95p0 < n_in62p1)
	{
		n_out62p0 = n_in62p5;
	}
	else
	{
		n_out62p0 = n_in62p4;
	}

// ScalarOp:67
	float n_out67p0 = dot(n_out62p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out61p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:79
	float n_out79p0 = n_out74p1 * n_out67p0;

// Texture:72
	vec4 tex_frg_72_read = texture(tex_frg_72, n_out22p0.xy);
	vec3 n_out72p0 = tex_frg_72_read.rgb;
	float n_out72p1 = tex_frg_72_read.a;

// If:63
	float n_in63p1 = 0.10000;
	float n_in63p2 = 0.00001;
	vec3 n_in63p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in63p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in63p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out63p0;
	if(abs(n_out95p0 - n_in63p1) < n_in63p2)
	{
		n_out63p0 = n_in63p3;
	}
	else if(n_out95p0 < n_in63p1)
	{
		n_out63p0 = n_in63p5;
	}
	else
	{
		n_out63p0 = n_in63p4;
	}

// ScalarOp:66
	float n_out66p0 = dot(n_out63p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out62p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:80
	float n_out80p0 = n_out72p1 * n_out66p0;

// Texture:73
	vec4 tex_frg_73_read = texture(tex_frg_73, n_out22p0.xy);
	vec3 n_out73p0 = tex_frg_73_read.rgb;
	float n_out73p1 = tex_frg_73_read.a;

// If:70
	float n_in70p1 = 0.00000;
	float n_in70p2 = 0.00001;
	vec3 n_in70p3 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_in70p4 = vec3(1.00000, 1.00000, 1.00000);
	vec3 n_in70p5 = vec3(0.00000, 0.00000, 0.00000);
	vec3 n_out70p0;
	if(abs(n_out95p0 - n_in70p1) < n_in70p2)
	{
		n_out70p0 = n_in70p3;
	}
	else if(n_out95p0 < n_in70p1)
	{
		n_out70p0 = n_in70p5;
	}
	else
	{
		n_out70p0 = n_in70p4;
	}

// ScalarOp:71
	float n_out71p0 = dot(n_out70p0, vec3(0.333333, 0.333333, 0.333333)) - dot(n_out63p0, vec3(0.333333, 0.333333, 0.333333));

// ScalarOp:81
	float n_out81p0 = n_out73p1 * n_out71p0;

// ScalarOp:82
	float n_out82p0 = n_out80p0 + n_out81p0;

// ScalarOp:83
	float n_out83p0 = n_out79p0 + n_out82p0;

// ScalarOp:84
	float n_out84p0 = n_out78p0 + n_out83p0;

// ScalarOp:85
	float n_out85p0 = n_out77p0 + n_out84p0;

// ScalarOp:56
	float n_out56p0 = n_out55p0 + n_out85p0;

// ScalarOp:57
	float n_out57p0 = n_out54p0 + n_out56p0;

// ScalarOp:58
	float n_out58p0 = n_out53p0 + n_out57p0;

// ScalarOp:59
	float n_out59p0 = n_out52p0 + n_out58p0;

// ScalarOp:86
	float n_out86p0 = n_out51p0 + n_out59p0;

// Color:15
	vec3 n_out15p0 = vec3(0.000000, 0.000000, 0.000000);
	float n_out15p1 = 1.000000;

// VectorOp:16
	vec3 n_out16p0 = vec3(n_out86p0) + n_out15p0;

// VectorOp:17
	vec3 n_out17p0 = n_out16p0 * vec3(n_out95p0);

// Output:0
	COLOR.rgb = n_out17p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 2690.01, -311 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 5080, 820 )
nodes/fragment/3/node = SubResource( 14 )
nodes/fragment/3/position = Vector2( 140, -380 )
nodes/fragment/8/node = SubResource( 59 )
nodes/fragment/8/position = Vector2( 1100, -380 )
nodes/fragment/14/node = SubResource( 1 )
nodes/fragment/14/position = Vector2( 920, -380 )
nodes/fragment/15/node = SubResource( 2 )
nodes/fragment/15/position = Vector2( 4600, 960 )
nodes/fragment/16/node = SubResource( 3 )
nodes/fragment/16/position = Vector2( 4580, 820 )
nodes/fragment/17/node = SubResource( 4 )
nodes/fragment/17/position = Vector2( 4820, 820 )
nodes/fragment/20/node = SubResource( 5 )
nodes/fragment/20/position = Vector2( -540, 300 )
nodes/fragment/21/node = SubResource( 6 )
nodes/fragment/21/position = Vector2( -320, 160 )
nodes/fragment/22/node = SubResource( 7 )
nodes/fragment/22/position = Vector2( -100, 160 )
nodes/fragment/24/node = SubResource( 8 )
nodes/fragment/24/position = Vector2( 540, -380 )
nodes/fragment/25/node = SubResource( 9 )
nodes/fragment/25/position = Vector2( 360, -380 )
nodes/fragment/27/node = SubResource( 11 )
nodes/fragment/27/position = Vector2( 740, -380 )
nodes/fragment/28/node = SubResource( 12 )
nodes/fragment/28/position = Vector2( 80, -80 )
nodes/fragment/30/node = SubResource( 15 )
nodes/fragment/30/position = Vector2( -340, -80 )
nodes/fragment/31/node = SubResource( 16 )
nodes/fragment/31/position = Vector2( -100, -80 )
nodes/fragment/32/node = SubResource( 17 )
nodes/fragment/32/position = Vector2( -100, 40 )
nodes/fragment/33/node = SubResource( 18 )
nodes/fragment/33/position = Vector2( 620, 1420 )
nodes/fragment/34/node = SubResource( 19 )
nodes/fragment/34/position = Vector2( 620, 1660 )
nodes/fragment/35/node = SubResource( 20 )
nodes/fragment/35/position = Vector2( 620, 1180 )
nodes/fragment/36/node = SubResource( 21 )
nodes/fragment/36/position = Vector2( 620, 940 )
nodes/fragment/37/node = SubResource( 22 )
nodes/fragment/37/position = Vector2( 620, 700 )
nodes/fragment/38/node = SubResource( 23 )
nodes/fragment/38/position = Vector2( 1140, 120 )
nodes/fragment/41/node = SubResource( 24 )
nodes/fragment/41/position = Vector2( 1340, 120 )
nodes/fragment/44/node = SubResource( 25 )
nodes/fragment/44/position = Vector2( 1540, 120 )
nodes/fragment/45/node = SubResource( 26 )
nodes/fragment/45/position = Vector2( 1740, 120 )
nodes/fragment/46/node = SubResource( 27 )
nodes/fragment/46/position = Vector2( 1940, 120 )
nodes/fragment/47/node = SubResource( 28 )
nodes/fragment/47/position = Vector2( 1940, -20 )
nodes/fragment/48/node = SubResource( 29 )
nodes/fragment/48/position = Vector2( 1740, -20 )
nodes/fragment/49/node = SubResource( 30 )
nodes/fragment/49/position = Vector2( 1540, -20 )
nodes/fragment/50/node = SubResource( 31 )
nodes/fragment/50/position = Vector2( 1340, -20 )
nodes/fragment/51/node = SubResource( 32 )
nodes/fragment/51/position = Vector2( 4020, 1100 )
nodes/fragment/52/node = SubResource( 33 )
nodes/fragment/52/position = Vector2( 3660, 1320 )
nodes/fragment/53/node = SubResource( 34 )
nodes/fragment/53/position = Vector2( 3200, 1460 )
nodes/fragment/54/node = SubResource( 35 )
nodes/fragment/54/position = Vector2( 2780, 1660 )
nodes/fragment/55/node = SubResource( 36 )
nodes/fragment/55/position = Vector2( 2420, 1820 )
nodes/fragment/56/node = SubResource( 37 )
nodes/fragment/56/position = Vector2( 2800, 1820 )
nodes/fragment/57/node = SubResource( 38 )
nodes/fragment/57/position = Vector2( 3220, 1620 )
nodes/fragment/58/node = SubResource( 39 )
nodes/fragment/58/position = Vector2( 3660, 1480 )
nodes/fragment/59/node = SubResource( 40 )
nodes/fragment/59/position = Vector2( 4000, 1280 )
nodes/fragment/60/node = SubResource( 41 )
nodes/fragment/60/position = Vector2( 2140, 120 )
nodes/fragment/61/node = SubResource( 42 )
nodes/fragment/61/position = Vector2( 2340, 120 )
nodes/fragment/62/node = SubResource( 43 )
nodes/fragment/62/position = Vector2( 2540, 120 )
nodes/fragment/63/node = SubResource( 44 )
nodes/fragment/63/position = Vector2( 2740, 120 )
nodes/fragment/66/node = SubResource( 45 )
nodes/fragment/66/position = Vector2( 2740, -20 )
nodes/fragment/67/node = SubResource( 46 )
nodes/fragment/67/position = Vector2( 2540, -20 )
nodes/fragment/68/node = SubResource( 47 )
nodes/fragment/68/position = Vector2( 2340, -20 )
nodes/fragment/69/node = SubResource( 48 )
nodes/fragment/69/position = Vector2( 2140, -20 )
nodes/fragment/70/node = SubResource( 49 )
nodes/fragment/70/position = Vector2( 2940, 120 )
nodes/fragment/71/node = SubResource( 50 )
nodes/fragment/71/position = Vector2( 2940, -20 )
nodes/fragment/72/node = SubResource( 51 )
nodes/fragment/72/position = Vector2( 620, 2620 )
nodes/fragment/73/node = SubResource( 52 )
nodes/fragment/73/position = Vector2( 620, 2860 )
nodes/fragment/74/node = SubResource( 53 )
nodes/fragment/74/position = Vector2( 620, 2380 )
nodes/fragment/75/node = SubResource( 54 )
nodes/fragment/75/position = Vector2( 620, 2140 )
nodes/fragment/76/node = SubResource( 55 )
nodes/fragment/76/position = Vector2( 620, 1900 )
nodes/fragment/77/node = SubResource( 56 )
nodes/fragment/77/position = Vector2( 2000, 2020 )
nodes/fragment/78/node = SubResource( 57 )
nodes/fragment/78/position = Vector2( 1540, 2280 )
nodes/fragment/79/node = SubResource( 58 )
nodes/fragment/79/position = Vector2( 1100, 2440 )
nodes/fragment/80/node = SubResource( 60 )
nodes/fragment/80/position = Vector2( 820, 2620 )
nodes/fragment/81/node = SubResource( 61 )
nodes/fragment/81/position = Vector2( 820, 2860 )
nodes/fragment/82/node = SubResource( 62 )
nodes/fragment/82/position = Vector2( 1100, 2620 )
nodes/fragment/83/node = SubResource( 63 )
nodes/fragment/83/position = Vector2( 1540, 2500 )
nodes/fragment/84/node = SubResource( 64 )
nodes/fragment/84/position = Vector2( 1980, 2260 )
nodes/fragment/85/node = SubResource( 65 )
nodes/fragment/85/position = Vector2( 2400, 2020 )
nodes/fragment/86/node = SubResource( 66 )
nodes/fragment/86/position = Vector2( 4260, 1120 )
nodes/fragment/93/node = SubResource( 67 )
nodes/fragment/93/position = Vector2( 1600, -540 )
nodes/fragment/95/node = SubResource( 68 )
nodes/fragment/95/position = Vector2( 1840, -480 )
nodes/fragment/96/node = SubResource( 69 )
nodes/fragment/96/position = Vector2( -1680, 160 )
nodes/fragment/97/node = SubResource( 70 )
nodes/fragment/97/position = Vector2( -1420, 160 )
nodes/fragment/99/node = SubResource( 72 )
nodes/fragment/99/position = Vector2( -1200, 160 )
nodes/fragment/100/node = SubResource( 73 )
nodes/fragment/100/position = Vector2( -980, 160 )
nodes/fragment/101/node = SubResource( 74 )
nodes/fragment/101/position = Vector2( -980, 280 )
nodes/fragment/103/node = SubResource( 76 )
nodes/fragment/103/position = Vector2( -560, 160 )
nodes/fragment/connections = PoolIntArray( 14, 0, 8, 0, 15, 0, 16, 1, 16, 0, 17, 0, 21, 0, 22, 0, 3, 0, 25, 0, 25, 0, 24, 0, 24, 0, 27, 0, 27, 0, 14, 0, 28, 0, 25, 1, 28, 0, 27, 1, 32, 0, 28, 1, 31, 0, 28, 0, 22, 0, 36, 0, 22, 0, 35, 0, 22, 0, 33, 0, 22, 0, 34, 0, 46, 0, 47, 0, 45, 0, 47, 1, 45, 0, 48, 0, 44, 0, 48, 1, 44, 0, 49, 0, 41, 0, 49, 1, 41, 0, 50, 0, 38, 0, 50, 1, 37, 1, 51, 0, 38, 0, 51, 1, 36, 1, 52, 0, 33, 1, 54, 0, 34, 1, 55, 0, 50, 0, 52, 1, 49, 0, 53, 1, 35, 1, 53, 0, 48, 0, 54, 1, 47, 0, 55, 1, 56, 0, 57, 1, 57, 0, 58, 1, 58, 0, 59, 1, 63, 0, 66, 0, 62, 0, 66, 1, 62, 0, 67, 0, 61, 0, 67, 1, 61, 0, 68, 0, 60, 0, 68, 1, 70, 0, 71, 0, 46, 0, 69, 1, 60, 0, 69, 0, 63, 0, 71, 1, 76, 1, 77, 0, 75, 1, 78, 0, 72, 1, 80, 0, 73, 1, 81, 0, 74, 1, 79, 0, 81, 0, 82, 1, 80, 0, 82, 0, 82, 0, 83, 1, 79, 0, 83, 0, 83, 0, 84, 1, 78, 0, 84, 0, 84, 0, 85, 1, 77, 0, 85, 0, 22, 0, 76, 0, 22, 0, 75, 0, 22, 0, 74, 0, 22, 0, 72, 0, 22, 0, 73, 0, 69, 0, 77, 1, 68, 0, 78, 1, 67, 0, 79, 1, 66, 0, 80, 1, 71, 0, 81, 1, 85, 0, 56, 1, 55, 0, 56, 0, 54, 0, 57, 0, 53, 0, 58, 0, 52, 0, 59, 0, 51, 0, 86, 0, 59, 0, 86, 1, 86, 0, 16, 0, 30, 0, 22, 1, 30, 0, 32, 1, 30, 0, 31, 1, 8, 0, 93, 0, 93, 0, 95, 0, 95, 0, 17, 1, 95, 0, 38, 0, 95, 0, 41, 0, 95, 0, 44, 0, 95, 0, 45, 0, 95, 0, 46, 0, 95, 0, 60, 0, 95, 0, 61, 0, 95, 0, 62, 0, 95, 0, 63, 0, 95, 0, 70, 0, 96, 0, 97, 1, 97, 0, 99, 0, 99, 0, 100, 0, 99, 1, 101, 0, 100, 0, 31, 0, 101, 0, 32, 0, 20, 0, 21, 0, 100, 0, 103, 0, 101, 0, 103, 1, 103, 0, 21, 1, 22, 0, 37, 0, 17, 0, 0, 0 )
